# =============================================================================
#
#   proxy_checker Windows Installation Script (PowerShell)
#
# =============================================================================

# --- Configuration ---
$RepoUrl = "https://github.com/Beriya73/proxy_checker.git"
$InstallDir = Join-Path $HOME "proxy_checker"
$CommandName = "proxy_checker"
$UserBinDir = Join-Path $HOME ".local\bin" # A user-specific directory for commands

# --- Script Setup ---
# Stop the script if any command fails
$ErrorActionPreference = "Stop"

# --- Helper functions for colored output ---
function Write-Host-Green { param($Message) Write-Host $Message -ForegroundColor Green }
function Write-Host-Yellow { param($Message) Write-Host $Message -ForegroundColor Yellow }
function Write-Host-Red { param($Message) Write-Host $Message -ForegroundColor Red }

Write-Host-Green "Starting proxy_checker installation for Windows..."

# --- Step 1: Check for required dependencies (Git, Python) ---
Write-Host-Yellow "`nStep 1: Checking dependencies..."

# Check for Git
if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
    Write-Host-Red "Error: Git is not installed or not in your PATH."
    Write-Host-Yellow "Please download and install Git from: https://git-scm.com/download/win"
    exit 1
}

# Check for Python and determine the command to use (python or python3)
$pythonExe = Get-Command python, python3 -ErrorAction SilentlyContinue | Select-Object -First 1
if (-not $pythonExe) {
    Write-Host-Red "Error: Python is not installed or not in your PATH."
    Write-Host-Yellow "Please download and install Python from: https://www.python.org/downloads/windows/"
    Write-Host-Yellow "IMPORTANT: During installation, make sure to check the box 'Add Python to PATH'."
    exit 1
}

# Check for the venv module
try {
    & $pythonExe.Source -c "import venv"
} catch {
    Write-Host-Red "Error: Your Python installation is missing the 'venv' module."
    Write-Host-Yellow "Please reinstall Python, ensuring standard library components are included."
    exit 1
}
Write-Host "All dependencies are satisfied. Using Python from: $($pythonExe.Source)"


# --- Step 2: Clone the repository ---
Write-Host-Yellow "`nStep 2: Cloning repository from GitHub..."
# If the directory already exists, remove it for a clean installation
if (Test-Path $InstallDir) {
    Write-Host "Found an existing installation. Removing for a clean setup..."
    Remove-Item -Recurse -Force -Path $InstallDir
}
git clone $RepoUrl $InstallDir
Write-Host "Repository successfully cloned to '$InstallDir'"


# --- Step 3: Set up Python virtual environment and install packages ---
Write-Host-Yellow "`nStep 3: Setting up Python environment and installing packages..."
Set-Location $InstallDir

# Create the virtual environment
& $pythonExe.Source -m venv venv

# Install all required packages
Write-Host "Installing dependencies: loguru, aiohttp, aiohttp-socks, pydantic, pyyaml..."
# Use the pip from the venv to install packages quietly
$pipExe = Join-Path $InstallDir "venv\Scripts\pip.exe"
& $pipExe install --upgrade pip -q
& $pipExe install loguru aiohttp aiohttp-socks pydantic pyyaml -q
Write-Host "Python packages installed successfully."


# --- Step 4: Create the launcher batch script ---
Write-Host-Yellow "`nStep 4: Creating the command launcher..."
$LauncherPath = Join-Path $InstallDir "$CommandName.bat"
$PythonInVenv = Join-Path $InstallDir "venv\Scripts\python.exe"
$PyScriptPath = Join-Path $InstallDir "proxy_checker.py"

# Create a simple .bat file that calls the python script with all arguments
$LauncherContent = @"
@echo off
REM This file was auto-generated by the install.ps1 script.
REM It executes the proxy_checker python script using its virtual environment.
"$PythonInVenv" "$PyScriptPath" %*
"@
Set-Content -Path $LauncherPath -Value $LauncherContent
Write-Host "Launcher script '$($CommandName).bat' created."


# --- Step 5: Add user bin directory to PATH and copy launcher ---
Write-Host-Yellow "`nStep 5: Making the command available system-wide..."
# Create the user's bin directory if it doesn't exist
if (-not (Test-Path $UserBinDir)) {
    New-Item -ItemType Directory -Path $UserBinDir | Out-Null
    Write-Host "Created directory '$UserBinDir' for user commands."
}

# Get the current User PATH environment variable
$currentUserPath = [System.Environment]::GetEnvironmentVariable("Path", "User")

# Add the directory to the User PATH if it's not already there
if ($currentUserPath -notlike "*$UserBinDir*") {
    $newPath = "$currentUserPath;$UserBinDir"
    [System.Environment]::SetEnvironmentVariable("Path", $newPath, "User")
    Write-Host "Added '$UserBinDir' to your PATH. You must restart your terminal for this to take effect."
} else {
    Write-Host "'$UserBinDir' is already in your PATH."
}

# Copy the launcher script to the user bin directory
Copy-Item -Path $LauncherPath -Destination $UserBinDir -Force
Write-Host "Command '$CommandName' is now installed."


# --- Final Message ---
Write-Host-Green "`n==================================================================="
Write-Host-Green " proxy_checker installation complete! âœ…"
Write-Host-Green "==================================================================="
Write-Host "You can now run the program from a `bNEW`b terminal window using:"
Write-Host-Yellow "  proxy_checker [arguments]"
Write-Host ""
Write-Host "For example:"
Write-Host-Yellow "  proxy_checker -h"
Write-Host ""
Write-Host-Red "IMPORTANT: You MUST open a new Command Prompt or PowerShell window"
Write-Host-Red "for the 'proxy_checker' command to be recognized."
Write-Host ""
Write-Host "To update, simply run this installation script again."
Write-Host "To uninstall, run the following commands in PowerShell:"
Write-Host "  Remove-Item -Path (Join-Path '$UserBinDir' '$CommandName.bat') -Force"
Write-Host "  Remove-Item -Path '$InstallDir' -Recurse -Force"